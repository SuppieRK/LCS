LCS workflow:

Consists of two main stages:
1. Exploitation - using known set of rules during event processing
2. Exploration - altering known set of rules to explore new possibilities

Exploitation can be split onto several stages:
1. Environmental sensors acquire new data or events from environment
2. Rules for which the condition matches the input event are searched and extracted from current population
3. A new rule is created if no matches is found in existing population - also known as covering.
4. The chosen rules are ranked by their fitness values and the rules with the highest predicted outcome are used to trigger the action.

Exploration phase is triggered after taking an action and consists of:
5. Once the action is performed, the system rewards the rules for which the action has been executed. RL module assigns credits to executed rules.
6. Rewards are used to update the rule fitness, applying evolutionary constraints to the existing population.
7. The genetic algorithm updates the existing population of rules by using genetic operators, such as crossover and mutation.

NOTE: Use simple example, because it will become must easier to implement.
Also, if I would think about by current RL implementation, I can notice, that I store policy I found.
Main question here is that how deterministic my actions are?
There are three possible variants of that:
1. I know a set of actions, applicable from each state.
2. I know a set of actions for each separate state, and those sets aren't equal.
3. I don't know actions.

Third variant is out of scope, because then there're no point in RL.
Second variant is suitable for solving routing problems, where possible outcome varies from each router I meet on the path.
Basically, talking about routing I move to the graph-oriented algorithms, but with LCS I can introduce somewhat similar to
initial (base) knowledge, received from an expert, which will be somehow altered and renewed for certain networking mechanism.
Additionally, network topology resolution most likely will introduce a new set of constraints I have to deal with.

Initially, according to the description of the LCS, I have to worry about those main things:
1. How to encode my rules in bit representation?
2. How to bind my components together?
3. How to introduce constraints?

ANd most importantly - which problem domain I would choose for my showcase in April?